import telebot
from telebot import types
import datetime
import json

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot('your bot token')

# --- –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (JSON) ---
SCHEDULE_FILE = 'schedule.json' # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

try:
    with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
        schedule = json.load(f)
except FileNotFoundError:
    schedule = {}

def save_schedule():
    with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
        json.dump(schedule, f, indent=4, ensure_ascii=False)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üìö")
    item2 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é üìÖ")
    item3 = types.KeyboardButton("–ú–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚û°Ô∏è") # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    markup.add(item1, item2, item3) # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫—É

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=markup)


@bot.message_handler(regexp="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üìö")
def today_schedule(message):
    today = datetime.datetime.now().strftime("%A").lower()
    group = get_user_group(message.chat.id) # !!! –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not group:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    today_lessons = schedule.get(group, {}).get(today, [])
    schedule_text = create_schedule_message(today.capitalize(), today_lessons)
    bot.send_message(message.chat.id, schedule_text)


def create_schedule_message(day_name, lessons):
    if lessons:
        schedule_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}:\n"
        for lesson in lessons:
            schedule_text += f"- {lesson}\n"
    else:
        schedule_text = f"–ù–∞ {day_name} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
    return schedule_text


@bot.message_handler(regexp="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é üìÖ")
def week_schedule(message):
    group = get_user_group(message.chat.id) # !!! –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not group:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    group_schedule = schedule.get(group, {})
    week_text = ""
    for day, lessons in group_schedule.items():
        week_text += create_schedule_message(day.capitalize(), lessons) + "\n\n"

    bot.send_message(message.chat.id, week_text or "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø—É—Å—Ç–æ–µ.")



@bot.message_handler(regexp="–ú–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚û°Ô∏è")
def next_lesson(message):
    now = datetime.datetime.now()
    group = get_user_group(message.chat.id) # !!! –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not group:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return


    group_schedule = schedule.get(group, {})
    next_lesson_info = find_next_lesson(now, group_schedule)

    if next_lesson_info:
        bot.send_message(message.chat.id, f"–¢–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:\n{next_lesson_info['lesson']} –≤ {next_lesson_info['time'].strftime('%A %H:%M')}")
    else:
        bot.send_message(message.chat.id, "–ë–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def find_next_lesson(now, group_schedule):
    next_lesson_info = None

    for day, lessons in group_schedule.items():
        try:
            day_offset = (list(group_schedule).index(day) - list(group_schedule).index(now.strftime("%A").lower())) % 7

            for lesson_str in lessons:

                try:
                    lesson_time_str = lesson_str.split()[-1]
                    lesson_time = datetime.datetime.strptime(lesson_time_str, "%H:%M-%H:%M").time()
                    lesson_datetime = datetime.datetime.combine(now.date() + datetime.timedelta(days=day_offset), lesson_time)


                    if lesson_datetime > now and (next_lesson_info is None or lesson_datetime < next_lesson_info["time"]):
                        next_lesson_info = {
                            "time": lesson_datetime,
                            "lesson": lesson_str
                        }
                except ValueError:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å "–ø—Ä–∞–∑–¥–Ω–∏–∫"
                    pass # –ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


        except ValueError: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏


    return next_lesson_info




# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏ (JSON) ---
USERS_FILE = 'users.json'

try:
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

def save_users():
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def get_user_group(user_id):
    user_id = str(user_id) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É
    if user_id in users:
        return users[user_id]
    else:
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

@bot.message_handler(commands=['setgroup'])
def set_group_command(message):
    if len(message.text.split()) > 1:
        group_name = message.text.split(maxsplit=1)[1]
        user_id = str(message.chat.id) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É
        users[user_id] = group_name
        save_users()
        bot.reply_to(message, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group_name}")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /setgroup <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>")


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
USERS_FILE = 'users.json'

try:
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

def save_users():
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def get_user_group(user_id):
    return users.get(str(user_id)) # user_id —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É


@bot.message_handler(commands=['setgroup'])
def set_group(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)
    if len(message.text.split()) > 1:
        group = message.text.split(maxsplit=1)[1]
        users[str(message.chat.id)] = group
        save_users()
        bot.reply_to(message, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {group}")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /setgroup <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>")




# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
ADMIN_ID = 123456789 # !!! –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID !!!

def admin_only(func): # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    def wrapper(message):
        if message.chat.id == ADMIN_ID:
            return func(message)
        else:
            bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return wrapper

@bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID and message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ ‚ûï")
@admin_only
def add_lesson(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏> <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è>\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n group1 monday –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 10:00-11:00")
    bot.register_next_step_handler(message, process_add_lesson)

def process_add_lesson(message):
    try:
        group, day, name, time = message.text.split(maxsplit=3)
        day = day.lower() # –ü—Ä–∏–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        if group not in schedule:
            schedule[group] = {}

        if day not in schedule[group]:
            schedule[group][day] = []

        schedule[group][day].append(f"{name} {time}")
        save_schedule()
        bot.send_message(message.chat.id, "–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(commands=['admin'])
@admin_only
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ ‚ûï", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ üîÑ", "–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ ‚ûñ")
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


# ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    if __name__ == '__main__':
        try:
         bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

bot.polling(none_stop=True)
